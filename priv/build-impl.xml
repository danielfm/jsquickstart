<?xml version="1.0" encoding="UTF-8"?>

<!--

***    DO NOT EDIT THIS FILE,       ***
***    EDIT ../build.xml INSTEAD    ***

-->

<project name="JsQuickStart Skeleton" default="build" basedir="..">
    <description>Provides means to build and test a JavaScript project.</description>

    <!-- Fixed properties -->
    <property file="priv/private.properties"/>

    <!-- Built-in execution modes -->
    <target name="default" description="Default execution mode">
        <echo message="Switching to default mode..."/>
        <property name="mode" value="${mode.default}"/>
    </target>

    <target name="ci" description="Continuous integration execution mode">
        <echo message="Switching to continuous integration mode..."/>
        <property name="mode" value="${mode.ci}"/>
    </target>

    <!-- Main callable targets -->
    <target name="init" depends="-pre-pre-init,-pre-init,-do-init,-post-init" description="Initializes the build properties"/>
    <target name="clean" depends="init,-do-clean,-post-clean" description="Removes the build output files"/>
    <target name="build" depends="-pre-pre-build,-pre-build,-do-build,-post-build" description="Bundles the JavaScript source files"/>
    <target name="min" depends="build,-pre-min,-do-min,-post-min" description="Generates a minified version of the bundle"/>
    <target name="test" depends="-pre-pre-test,-pre-test,-do-test,-post-test" description="Runs the unit tests"/>
    <target name="doc-api" depends="-pre-pre-doc-api,-pre-doc-api,-do-doc-api,-post-doc-api" description="Generates the API documentation"/>
    <target name="lint" depends="build,-pre-lint,-do-lint,-post-lint" description="Runs JSLint for both main code and test code"/>

    <!-- Init -->
    <target name="-pre-pre-init">
        <!-- Loads Ant-Contrib tasks -->
        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
            <classpath>
                <pathelement location="${build.java.lib.dir}/antcontrib.jar"/>
            </classpath>
        </taskdef>
    </target>

    <target name="-do-init">
        <!-- You can override default properties using this file -->
        <property file="${conf.dir}/${mode}/build.properties"/>
        <property file="${conf.dir}/${mode.default}/build.properties"/>

        <!-- Default build properties -->
        <property file="priv/build-impl.properties"/>

        <!-- Project information -->
        <property file="${conf.dir}/${mode}/project.properties"/>
        <property file="${conf.dir}/${mode.default}/project.properties"/>

        <!-- Convenient reference to JavaScript main source files -->
        <fileset dir="${main.dir}" id="main.js.files">
            <include name="**/*.js"/>
        </fileset>

        <!-- Convenient reference to JavaScript test source files -->
        <fileset dir="${test.dir}" id="test.js.files">
            <include name="**/*.js"/>
        </fileset>

        <!-- Other properties -->
        <property name="project.bundle.file" value="${build.out.dir}/${project.name}-${project.version}.js"/>
        <property name="project.bundle.min.file" value="${build.out.dir}/${project.name}-${project.version}-min.js"/>
    </target>

    <!-- Clean -->
    <target name="-do-clean">
        <echo message="Removing build output files..."/>
        <delete dir="${build.dir}"/>
        <delete dir="${doc.api.dir}"/>
        <echo message="Done."/>
    </target>

    <!-- Build -->
    <target name="-pre-pre-build" depends="init">
        <mkdir dir="${build.dir}"/>
    </target>

    <target name="-do-build">
        <echo message="Building JavaScript bundle..."/>
        <concat destfile="${project.bundle.file}" fixlastline="true">
            <path>
                <filelist dir="${basedir}" files="${project.bundle}"/>
            </path>
            <filterchain>
                <!-- Replaces all Ant placeholders (e.g. ${property.name}) -->
                <expandproperties/>
            </filterchain>
        </concat>
        <property name="project.bundle.path" location="${project.bundle.file}"/>
        <echo message="Bundle created at ${project.bundle.path}"/>
    </target>

    <!-- Minify -->
    <target name="-do-min">
        <echo message="Minifying JavaScript bundle..."/>
        <java jar="${yuicompressor.jar}" fork="true">
            <arg line="${yuicompressor.extraparams}"/>
            <arg value="-o"/>
            <arg value="${project.bundle.min.file}"/>
            <arg value="${project.bundle.file}"/>
        </java>
        <property name="project.bundle.min.path" location="${project.bundle.min.file}"/>
        <echo message="Minified bundle created at ${project.bundle.min.path}"/>
    </target>

    <!-- Compress -->
    <target name="min-gz" depends="min" description="GZips the minified bundle">
        <echo message="Compressing minified bundle..."/>
        <gzip src="${project.bundle.min.file}" destfile="${project.bundle.min.file}.gz"/>
    </target>

    <!-- Test -->
    <target name="test-server" depends="init" description="Starts the test server">
        <echo message="Starting test server..."/>
        <java jar="${jstestdriver.jar}" fork="true">
            <arg value="--port"/>
            <arg value="${jstestdriver.port}"/>
        </java>
    </target>

    <target name="test-capture" depends="init" description="Captures the configured browsers">
        <echo message="Capturing browsers..."/>
        <foreach list="${jstestdriver.browser}" param="browser" target="-browser-capture" inheritall="true"/>
        <echo message="Done."/>
    </target>
    <target name="-browser-capture">
        <exec executable="${browser}" spawn="true">
            <arg value="${jstestdriver.url}/capture"/>
        </exec>
    </target>

    <target name="-pre-pre-test" depends="build">
        <!-- If the config file exists on the given mode config dir, use it -->
        <!-- Otherwise, fallback to the default one -->
        <condition property="jstestdriver.conf.file" value="${conf.dir}/${mode}/${jstestdriver.conf}" else="${conf.dir}/${mode.default}/${jstestdriver.conf}">
            <available file="${conf.dir}/${mode}/${jstestdriver.conf}" type="file"/>
        </condition>

        <!-- Copies the configuration file to the build directory -->
        <property name="jstestdriver.conf.parsed" value="${build.dir}/${jstestdriver.conf}"/>
        <copy file="${jstestdriver.conf.file}" todir="${build.dir}" overwrite="true">
            <filterchain>
                <!-- Replaces all Ant placeholders (e.g. ${property.name}) -->
                <expandproperties/>
            </filterchain>
      </copy>

      <!-- Creates a directory to store the test reports -->
      <if>
          <equals arg1="${mode}" arg2="${mode.ci}"/>
          <then>
              <mkdir dir="${build.testreports.dir}"/>
          </then>
      </if>
    </target>

    <!-- This target behaves differently according to the current mode -->
    <target name="-do-test">
        <if>
            <equals arg1="${mode}" arg2="${mode.ci}"/>
            <then>
                <runtarget target="-do-test-ci"/>
            </then>
            <else>
                <runtarget target="-do-test-default"/>
            </else>
        </if>
    </target>

    <target name="-do-test-default">
        <echo message="Running tests..."/>
        <java jar="${jstestdriver.jar}" fork="true" failonerror="true">
            <arg value="--config"/>
            <arg value="${jstestdriver.conf.parsed}"/>
            <arg value="--server"/>
            <arg value="${jstestdriver.url}"/>
            <arg value="--tests"/>
            <arg value="all"/>
        </java>
        <echo message="Done."/>
    </target>

    <target name="-do-test-ci">
        <echo message="Running tests..."/>
        <java jar="${jstestdriver.jar}" fork="true" failonerror="true">
            <arg value="--config"/>
            <arg value="${jstestdriver.conf.parsed}"/>
            <arg value="--server"/>
            <arg value="${jstestdriver.url}"/>
            <arg value="--tests"/>
            <arg value="all"/>
            <arg value="--testOutput"/>
            <arg value="${build.testreports.dir}"/>
        </java>
        <echo message="Test reports created at ${build.testreports.dir}"/>
    </target>

    <!-- Documentation -->
    <target name="-pre-pre-doc-api" depends="init">
        <!-- If the config file exists on the given mode config dir, uses it -->
        <!-- Otherwise, fallback to the default one -->
        <condition property="jsdoc.conf.file" value="${conf.dir}/${mode}/${jsdoc.conf}" else="${conf.dir}/${mode.default}/${jsdoc.conf}">
            <available file="${conf.dir}/${mode}/${jsdoc.conf}" type="file"/>
        </condition>

        <!-- Copies the configuration file to the build directory -->
        <property name="jsdoc.conf.parsed" value="${build.dir}/${jsdoc.conf}"/>
        <copy file="${jsdoc.conf.file}" todir="${build.dir}" overwrite="true">
            <filterchain>
                <!-- Replaces all Ant placeholders (e.g. ${property.name}) -->
                <expandproperties/>
            </filterchain>
      </copy>
    </target>

    <target name="-do-doc-api">
        <echo message="Creating API documentation..."/>
        <property name="doc.api.path" location="${doc.api.dir}"/>
        <java jar="${jsdoc.runner.jar}" fork="true" failonerror="true">
            <arg value="${jsdoc.runner}"/>
            <arg line="${jsdoc.extraparams}"/>
            <arg line="${main.dir}"/>
            <arg value="-c=${jsdoc.conf.parsed}"/>
            <arg value="-t=${jsdoc.template}"/>
            <arg value="-d=${doc.api.dir}"/>
        </java>
        <echo message="API documentation created at ${doc.api.path}"/>
    </target>

    <!-- JSLint -->
    <target name="-do-lint">
        <echo message="Running JSLint..."/>
        <pathconvert pathsep=" " property="jslint.main.files" refid="main.js.files"/>
        <pathconvert pathsep=" " property="jslint.test.files" refid="test.js.files"/>

        <java jar="${jslint.jar}" fork="true" failonerror="true">
            <arg line="${jslint.extraparams}"/>
            <arg line="${jslint.main.files}"/>
            <arg line="${jslint.test.files}"/>
        </java>
        <echo message="Done."/>
    </target>

    <!-- You can override the placeholder targets below in the ../build.xml file -->
    <target name="-pre-init"/>
    <target name="-post-init"/>

    <target name="-post-clean"/>

    <target name="-pre-build"/>
    <target name="-post-build"/>

    <target name="-pre-min"/>
    <target name="-post-min"/>

    <target name="-pre-test"/>
    <target name="-post-test"/>

    <target name="-pre-doc-api"/>
    <target name="-post-doc-api"/>

    <target name="-pre-lint"/>
    <target name="-post-lint"/>
</project>
